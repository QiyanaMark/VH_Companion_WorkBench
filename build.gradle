buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'

    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'


version = "${mod_version}"
group = "dev.${mod_authors}.${mod_id}"
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: "${mc_version}"
    copyIdeResources = true

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            arg "-mixin.config=${mod_id}.mixins.json"

            property 'mixin.debug.export', 'true'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods {
                the_vault_jei {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=${mod_id}.mixins.json"

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods {
                the_vault_jei {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            arg "-mixin.config=${mod_id}.mixins.json"

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods {
                the_vault_jei {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=${mod_id}.mixins.json"

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                the_vault_jei {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    maven {
        url = uri("https://cursemaven.com")
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = 'GeckoLib'
        url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    maven {
        name = "Illusive Soulworks maven"
        url = "https://maven.theillusivec4.top/"
    }

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    flatDir {
        dirs 'libs'
    }
}


dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1")) {
        jarJar.ranged(it, "[0.4.1,)")
    }

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency

//    compileOnly "com.github.Attack8:vaultadditions:v1.16.0"
    // runtimeOnly "com.github.Attack8:vaultadditions:v1.16.0"

    implementation fg.deobf("curse.maven:vault-hunters-official-mod-458203:${vault_version}")

    runtimeOnly fg.deobf("curse.maven:alexs-mobs-426558:3853078")
    runtimeOnly fg.deobf("curse.maven:applied-energistics-2-223794:4136407")
    runtimeOnly fg.deobf("curse.maven:architects-palette-433862:4498424")
    runtimeOnly fg.deobf("curse.maven:autoreglib-250363:3642382")
    runtimeOnly fg.deobf("curse.maven:cagerium-709608:4435767")
    runtimeOnly fg.deobf("curse.maven:citadel-331936:3783096")
    runtimeOnly fg.deobf("curse.maven:cofh-core-69162:4385215")
    runtimeOnly fg.deobf("curse.maven:compressium-342929:4034865")
    runtimeOnly fg.deobf("curse.maven:create-328085:4550986")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${mc_version}-${curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${mc_version}-${curios_version}")
    runtimeOnly fg.deobf("curse.maven:easy-villagers-400514:3887794")
    runtimeOnly fg.deobf("curse.maven:easy-piglins-419372:3798287")
    runtimeOnly fg.deobf("curse.maven:ecologics-570463:4171283")
    implementation fg.deobf("curse.maven:geckolib-388172:4181370")
    runtimeOnly fg.deobf("curse.maven:loot-beams-506757:3879829")
    runtimeOnly fg.deobf("curse.maven:mekanism-268560:3875976")
    runtimeOnly fg.deobf("curse.maven:modular-routers-250294:4984984")
    runtimeOnly fg.deobf("curse.maven:quark-243121:3840125")
    runtimeOnly fg.deobf("curse.maven:refined-storage-243076:4217424")
    runtimeOnly fg.deobf("curse.maven:selene-499980:3842421")
    runtimeOnly fg.deobf("curse.maven:shutup-experimental-settings-407174:3759881")
    runtimeOnly fg.deobf("curse.maven:sophisticated-core-618298:5296312")
    runtimeOnly fg.deobf("curse.maven:sophisticated-backpacks-422301:5654080")
    runtimeOnly fg.deobf("curse.maven:sophisticated-backpacks-vault-hunters-edition-696425:4859716")
    runtimeOnly fg.deobf("curse.maven:supplementaries-412082:4548315")
    runtimeOnly fg.deobf("curse.maven:twigs-496913:3968055")
    runtimeOnly fg.deobf("curse.maven:vault-integrations-867003:6802791")
    runtimeOnly fg.deobf("curse.maven:xaeros-minimap-263420:4181105")
    runtimeOnly fg.deobf("curse.maven:xaeros-world-map-317780:4193007")
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

afterEvaluate {
    tasks.configureReobfTaskForReobfJar.mustRunAfter(tasks.compileJava)
    tasks.configureReobfTaskForReobfJarJar.mustRunAfter(tasks.compileJava)
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: mc_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes([
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : "attackeight_dev",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "attackeight_dev",
                'MixinConfigs': "${mod_id}.mixins.json",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')
// publish.dependsOn('reobfJar')

publishing {
//    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}